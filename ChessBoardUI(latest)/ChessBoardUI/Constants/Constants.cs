using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ChessBoardUI.Constants
{
    public static class Constants
    {
        internal const int CELL_EDGE_LENGTH = 70;
        internal const int CANVAS_MARGIN_LEFT = 35;  //to pinpoint the cursor position in the canvas 
        internal const int CANVAS_MARGIN_TOP = 45;   //to pinpoint the cursor position in the canvas 
        internal const int IMAGE_CENTER_TO_LEFTTOP = 30; //center of image to left-top corner
        const ulong fullboard = 0xffffffffffffffff ;
        //public const int PAWN_WEIGHT = 100;
        //public const int KNIGHT_WEIGHT = 300;
        //public const int BISHOP_WEIGHT = 300;
        //public const int ROOK_WEIGHT = 500;
        //public const int QUEEN_WEIGHT = 900;
        //public const int KING_WEIGHT = 10000;
        public const int PAWN_WEIGHT = 100;
        public const int KNIGHT_WEIGHT = 320;
        public const int BISHOP_WEIGHT = 330;
        public const int ROOK_WEIGHT = 500;
        public const int QUEEN_WEIGHT = 900;
        public const int KING_WEIGHT = 20000;

        public static int[] PawnTable = new int[] {
                //17   ,   17   ,   23   ,   43   ,   46   ,   23   ,   17   ,   17   ,
                //7   ,   7   ,   13  ,   33  ,   36  ,   13  ,   7   ,   7   ,
                //-2  ,   -2  ,   4   ,   22  ,   25  ,   4   ,   -2  ,   -2  ,
                //-3  ,   -3  ,   2   ,   19   ,   21  ,   2   ,   -3  ,   -3  ,
                //-4  ,   -4  ,   0   ,   16   ,   18   ,   0   ,   -4  ,   -4  ,
                //-4  ,   -4  ,   0   ,   4   ,   6   ,   0   ,   -4  ,   -4  ,
                //-1  ,   -1  ,   1   ,   5   ,   6   ,   1   ,   -1  ,   -1  ,
                //0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0
                0,  0,  0,  0,  0,  0,  0,  0,
                50, 50, 50, 50, 50, 50, 50, 50,
                10, 10, 20, 30, 30, 20, 10, 10,
                5,  5, 10, 27, 27, 10,  5,  5,
                0,  0,  0, 25, 25,  0,  0,  0,
                5, -5,-10,  0,  0,-10, -5,  5,
                5, 10, 10,-25,-25, 10, 10,  5,
                0,  0,  0,  0,  0,  0,  0,  0
                };


        public static int[] KnightTable = new int[] {
                //-2  ,   2   ,   7   ,   9   ,   9   ,   7   ,   2   ,   -2  ,
                //1   ,   4   ,   12  ,   13  ,   13  ,   12  ,   4   ,   1   ,
                //5   ,   11  ,   18  ,   19  ,   19  ,   18  ,   11  ,   5   ,
                //3   ,   5  ,   14  ,   14  ,   14  ,   14  ,   5  ,   3   ,
                //0   ,   3   ,   8   ,   9   ,   9   ,   8   ,   3   ,   0   ,
                //-5  ,   1   ,   3   ,   4   ,   4   ,   3   ,   1   ,   -5  ,
                //-5  ,   -3  ,   -1  ,   0   ,   0   ,   -1  ,   -3  ,   -5  ,
                //-7  ,   -5  ,   -4  ,   -2  ,   -2  ,   -4  ,   -5  ,   -7
                 -50,-40,-30,-30,-30,-30,-40,-50,
                 -40,-20,  0,  0,  0,  0,-20,-40,
                 -30,  0, 10, 15, 15, 10,  0,-30,
                 -30,  5, 15, 20, 20, 15,  5,-30,
                 -30,  0, 15, 20, 20, 15,  0,-30,
                 -30,  5, 10, 15, 15, 10,  5,-30,
                 -40,-20,  0,  5,  5,  0,-20,-40,
                 -50,-40,-20,-30,-30,-20,-40,-50,
                };

        public static int[] BishopTable = new int[] {
                //2   ,   3   ,   4   ,   4   ,   4   ,   4   ,   3   ,   2   ,
                //4   ,   7   ,   7   ,   7   ,   7   ,   7   ,   7   ,   4   ,
                //3   ,   5   ,   6   ,   6   ,   6   ,   6   ,   5   ,   3   ,
                //3   ,   5   ,   7   ,   7   ,   7   ,   7   ,   5   ,   3   ,
                //4   ,   5   ,   6   ,   8   ,   8   ,   6   ,   5   ,   4   ,
                //4   ,   5   ,   5   ,   -2  ,   -2  ,   5   ,   5   ,   4   ,
                //5   ,   5   ,   5   ,   3   ,   3   ,   5   ,   5   ,   5   ,
                //0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0
                 -20,-10,-10,-10,-10,-10,-10,-20,
                 -10,  0,  0,  0,  0,  0,  0,-10,
                 -10,  0,  5, 10, 10,  5,  0,-10,
                 -10,  5,  5, 10, 10,  5,  5,-10,
                 -10,  0, 10, 10, 10, 10,  0,-10,
                 -10, 10, 10, 10, 10, 10, 10,-10,
                 -10,  5,  0,  0,  0,  0,  5,-10,
                 -20,-10,-40,-10,-10,-40,-10,-20,
                };

        public static int[] RookTable = new int[] {
                //9   ,   9   ,   11  ,   10  ,   11  ,   9   ,   9   ,   9   ,
                //4   ,   6   ,   7   ,   9   ,   9   ,   7   ,   6   ,   4   ,
                //9   ,   10  ,   10  ,   11  ,   11  ,   10  ,   10  ,   9   ,
                //8   ,   8   ,   8   ,   9   ,   9   ,   8   ,   8   ,   8   ,
                //6   ,   6   ,   5   ,   6   ,   6   ,   5   ,   6   ,   6   ,
                //4   ,   5   ,   5   ,   5   ,   5   ,   5   ,   5   ,   4   ,
                //3   ,   4   ,   4   ,   6   ,   6   ,   4   ,   4   ,   3  ,
                //0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0
                  0,  0,  0,  0,  0,  0,  0,  0,
                  5, 10, 10, 10, 10, 10, 10,  5,
                 -5,  0,  0,  0,  0,  0,  0, -5,
                 -5,  0,  0,  0,  0,  0,  0, -5,
                 -5,  0,  0,  0,  0,  0,  0, -5,
                 -5,  0,  0,  0,  0,  0,  0, -5,
                 -5,  0,  0,  0,  0,  0,  0, -5,
                  0,  0,  0,  5,  5,  0,  0,  0
                };

        public static int[] KingTableO = new int[] {
                0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,
                0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,
                0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,
                0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,
                0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,
                0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,
                0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,
                0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,
                };

        public static int[] KingTableE = new int[] {
                -50 ,   -10 ,   0   ,   0   ,   0   ,   0   ,   -10 ,   -50 ,
                -10 ,    0  ,   10  ,   10  ,   10  ,   10  ,   0   ,   -10 ,
                0   ,   10  ,   20  ,   20  ,   20  ,   20  ,   10  ,   0   ,
                0   ,   10  ,   20  ,   40  ,   40  ,   20  ,   10  ,   0   ,
                0   ,   10  ,   20  ,   40  ,   40  ,   20  ,   10  ,   0   ,
                0   ,   10  ,   20  ,   20  ,   20  ,   20  ,   10  ,   0   ,
                -10,    0   ,   10  ,   10  ,   10  ,   10  ,   0   ,   -10 ,
                -50 ,   -10 ,   0   ,   0   ,   0   ,   0   ,   -10 ,   -50
                };

        public static int[] QueenTable = new int[] {
                //2   ,   3   ,   4   ,   3   ,   4   ,   3   ,   3   ,   2   ,
                //2   ,   3   ,   4   ,   4   ,   4   ,   4   ,   3   ,   2   ,
                //3   ,   4   ,   4   ,   4   ,   4   ,   4   ,   4   ,   3   ,
                //3   ,   3   ,   4   ,   4   ,   4   ,   4   ,   3   ,   3   ,
                //2   ,   3   ,   3   ,   4   ,   4   ,   3   ,   3   ,   2   ,
                //2   ,   2   ,   2   ,   3   ,   3   ,   2   ,   2   ,   2   ,
                //2   ,   2   ,   2   ,   2   ,   2   ,   2   ,   2   ,   2   ,
                //0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0
                -20,-10,-10, -5, -5,-10,-10,-20,
                -10,  0,  0,  0,  0,  0,  0,-10,
                -10,  0,  5,  5,  5,  5,  0,-10,
                 -5,  0,  5,  5,  5,  5,  0, -5,
                  0,  0,  5,  5,  5,  5,  0, -5,
                -10,  5,  5,  5,  5,  5,  0,-10,
                -10,  0,  5,  0,  0,  0,  0,-10,
                -20,-10,-10, -5, -5,-10,-10,-20
                };

        public static int[] Mirror64 = new int[] {
                56  ,   57  ,   58  ,   59  ,   60  ,   61  ,   62  ,   63  ,
                48  ,   49  ,   50  ,   51  ,   52  ,   53  ,   54  ,   55  ,
                40  ,   41  ,   42  ,   43  ,   44  ,   45  ,   46  ,   47  ,
                32  ,   33  ,   34  ,   35  ,   36  ,   37  ,   38  ,   39  ,
                24  ,   25  ,   26  ,   27  ,   28  ,   29  ,   30  ,   31  ,
                16  ,   17  ,   18  ,   19  ,   20  ,   21  ,   22  ,   23  ,
                8   ,   9   ,   10  ,   11  ,   12  ,   13  ,   14  ,   15  ,
                0   ,   1   ,   2   ,   3   ,   4   ,   5   ,   6   ,   7
                };


    }


}
